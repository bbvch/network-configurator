#! /usr/bin/env python


'''
(c) Copyright 2018
Widmann Roland, bbv Software Services AG

SPDX-License-Identifier: GPL-3.0-only
'''

import os, sys
import errno
import pyconnman as con
import dbus
import dbus.mainloop.glib
import signal
from time import sleep, time


CONNMAN_REINIT = 'CONNMAN_REINIT'
DEBUG = False

def print_d(hit_key, *text):
    text_to_print = ""
    if DEBUG:
        for te in text:
            text_to_print += ' ' + str(te)
        print text_to_print
        if hit_key:
            raw_input('continue...')

def validate_ip(s):
    if s is None:
        return False
    octetts = s.split('.')
    if len(octetts) != 4:
        return False
    for octett in octetts:
        if not octett.isdigit():
            return False
        int_octett = int(octett)
        if int_octett < 0 or int_octett > 255:
            return False
    return True


class Parameters(object):

    def __init__(self, **kwargs):
        self.__method = '' if 'method' not in kwargs.iterkeys() else kwargs['method']
        self.__ip = '' if 'ip' not in kwargs.iterkeys() else kwargs['ip']
        self.__netmask = '' if not 'netmask' in kwargs.iterkeys() or not validate_ip(kwargs['netmask']) else kwargs['netmask']
        self.__gateway = '' if not 'gateway' in kwargs.iterkeys() or not validate_ip(kwargs['gateway']) else kwargs['gateway']
        self.__dns = '' if not 'dns' in kwargs.iterkeys() or not validate_ip(kwargs['dns']) else kwargs['dns']
        self.__ssid = '' if not 'ssid' in kwargs.iterkeys() else kwargs['ssid']
        self.__passphrase = '' if not 'passphrase' in kwargs.iterkeys() else kwargs['passphrase']

        if 'clonefrom' in kwargs.iterkeys():
            self.method = kwargs['clonefrom'].method
            self.ip = kwargs['clonefrom'].ip
            self.netmask = kwargs['clonefrom'].netmask
            self.gateway = kwargs['clonefrom'].gateway
            self.dns = kwargs['clonefrom'].dns
            self.passphrase = kwargs['clonefrom'].passphrase

    def reset(self):
        self.__ip = ''
        self.__netmask = ''
        self.__gateway = ''
        self.__dns = ''

    @property
    def method(self):
        return self.__method

    @method.setter
    def method(self, method):
        if method == '0' or method == 'dhcp':
            self.__method = 'dhcp'
        elif method == '1' or method == 'manual':
            self.__method = 'manual'
        else:
            self.__method = ''

    @property
    def ip(self):
        return self.__ip

    @ip.setter
    def ip(self, ip):
        self.__ip = ip if validate_ip(ip) else self.__ip

    @property
    def netmask(self):
        return self.__netmask

    @netmask.setter
    def netmask(self, netmask):
        self.__netmask = netmask if validate_ip(netmask) else self.__netmask

    @property
    def gateway(self):
        return self.__gateway

    @gateway.setter
    def gateway(self, gateway):
        self.__gateway = gateway if validate_ip(gateway) else self.__gateway

    @property
    def dns(self):
        return self.__dns

    @dns.setter
    def dns(self, dns):
        self.__dns = dns if validate_ip(dns) else self.__dns

    @property
    def passphrase(self):
        return self.__passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        self.__passphrase = passphrase


class MenuManager:

    def __init__(self, manager, wifi_tech):
        self.menu_exit_char = 'q'
        self.menu_switch_wifi_state = 'w'
        self.menu_refresh_wifi = 'r'
        self.menu_connect = 'c'
        self.specialchars = [self.menu_exit_char]
        self.manager = manager
        self.services = self.manager.get_services()
        self.wifi_tech = wifi_tech
        self.current_max_index = sys.maxint
        self.wifi_states = {0: 'OFF', 1: 'ON'}
        self.wifi_states_rev = {0: 'ON', 1: 'OFF'}
        self.current_method = ''
        self.displayed_wifi_state = ''
        self.property_index = {'METHOD': '0',
                            'IP': '1',
                            'NETMASK': '2',
                            'GATEWAY': '3',
                            'DNS': '4',
                            'PASSPHRASE': '5',
                            'CONNECT': self.menu_connect}

    def read_valid_method(self, text):
        entry = raw_input(text)
        while not entry.isdigit() or (entry.isdigit() and int(entry) > 1) or not entry:
            entry = raw_input(text)
        return entry

    def read_valid_index(self, text):
        entry = raw_input(text)
        while (not entry.isdigit() and entry not in self.specialchars) \
                or (entry.isdigit() and int(entry) > self.current_max_index) or not entry:
            entry = raw_input(text)
        return entry

    def read_valid_ip(self, text, check_for_dhcp=True):
        if check_for_dhcp and self.current_method == 'manual':
            new_address = raw_input(text)

            while str(new_address) != "" and not validate_ip(new_address):
                new_address = raw_input(text)

            return new_address

    def read_string(self, text, empty_string=True):
        input = raw_input(text)

        while empty_string and input == '':
            input = raw_input(text)

        return input

    def show_choose_device_menu(self, services):
        self.specialchars = [self.menu_exit_char, self.menu_switch_wifi_state, self.menu_refresh_wifi]
        lines = "=============================="
        self.current_method = ''
        self.displayed_wifi_state = self.wifi_tech.Powered

        os.system('clear')
        print "Devices available | Wifi: ", self.wifi_states[self.displayed_wifi_state], "\n", lines

        for (i, (path, params)) in enumerate(services):
            tech = con.service.ConnService(path)
            wifi_name = "" if tech.Name is None else tech.Name
            wifi_type = "" if tech.Type is None else tech.Type
            wifi_strength = "-" if wifi_type == 'ethernet' or tech.Strength is None else str(int(tech.Strength)) + '%'
            print i, ') ', (wifi_type + " - " + wifi_name).encode('utf-8'), ' (', wifi_strength, ')'

        print lines
        print self.menu_switch_wifi_state, ') Turn wifi ->', self.wifi_states_rev[self.displayed_wifi_state]
        print self.menu_refresh_wifi, ') Refresh wifi'
        print self.menu_exit_char, ') Exit'
        self.current_max_index = len(services) - 1

        input = self.read_valid_index('Choose device to configure: ')

        if input.isdigit():
            return ('DEVICE_CHOSEN', input)
        else:
            return self.instructions_to_execute(input)

    def show_device_menu(self, device):
        self.specialchars = [self.menu_exit_char, self.menu_connect]
        headline = "Current device configuration for " + device.path
        self.show_trunk_cfg_menu(device, headline)

        if device.Type == 'ethernet':
            self.show_ethernet_menu(headline)
        else:
            self.show_wifi_menu(device, headline)

        print "(", self.menu_exit_char, ") Back to Devices"

        input = self.read_valid_index('Choose parameter to configure: ')

        return self.instructions_to_execute(input)

    def instructions_to_execute(self, input):
        if input == self.menu_connect:
            return ('DEVICE_APPLY_CONFIG',)
        elif input == self.property_index['METHOD']:
            new_method = self.read_valid_method('Enter new Method [0 - dhcp | 1 - manual]: ')
            return ('DEVICE_METHOD', new_method)
        elif input == self.property_index['IP']:
            new_ip = self.read_valid_ip('Enter new IP-Adress: ')
            return ('DEVICE_IP', new_ip)
        elif input == self.property_index['NETMASK']:
            new_netmask = self.read_valid_ip('Enter new Subnetmask: ')
            return ('DEVICE_NETMASK', new_netmask)
        elif input == self.property_index['GATEWAY']:
            new_gw = self.read_valid_ip('Enter new gateway: ')
            return ('DEVICE_GATEWAY', new_gw)
        elif input == self.property_index['DNS']:
            new_dns = self.read_valid_ip('Enter new DNS-Address: ')
            return ('DEVICE_DNS', new_dns)
        elif input == self.property_index['PASSPHRASE']:
            new_pw = self.read_string('Enter new passphrase: ')
            return ('DEVICE_PASSPHRASE', new_pw)
        elif input == self.menu_switch_wifi_state:
            if self.displayed_wifi_state == 0:
                return ('WIFI_SET', '1')
            else:
                return ('WIFI_SET', '0')
        elif input == self.menu_refresh_wifi:
            return ('WIFI_REFRESH',)
        elif input == self.menu_exit_char:
            return ('QUIT',)

    def show_trunk_cfg_menu(self, device_, headline):
        device_.refresh_current_configuration()
        self.current_method = device_.new.method
        line = len(headline) * '='

        os.system('clear')
        print line
        print headline
        print "SSID: " + device_.Name + " State: " + device_.get_current_state()
        print line
        print "(0) Method:\t\t" + device_.current.method + "\t\t" + device_.new.method
        print "(1) IPv4:\t\t" + device_.current.ip + "\t\t" + device_.new.ip
        print "(2) Netmask:\t\t" + device_.current.netmask + "\t\t" + device_.new.netmask
        print "(3) Gateway:\t\t" + device_.current.gateway + "\t\t" + device_.new.gateway
        print "(4) DNS:\t\t" + device_.current.dns + "\t\t\t" + device_.new.dns

    def show_ethernet_menu(self, headline):
        self.current_max_index = 4
        print len(headline) * '='
        print "(", self.menu_connect, ") Change configuration"

    def show_wifi_menu(self, device_, headline):
        self.current_max_index = 5
        print "(5) Enter Password \t" + device_.current.passphrase.rstrip() + "\t" + device_.new.passphrase.rstrip()
        print len(headline) * '='
        print "(", self.menu_connect, ") Connect/Disconnect"


class Device:

    def __init__(self, manager, services):
        self.manager = manager
        self.services = services
        self.retry_count = 0
        self.agent_index = 0
        (self.path, self.params) = self.services
        self.device_name = self.path.split('/')[4]
        self.tech = con.service.ConnService(self.path)
        self.Type = self.tech.Type
        self.Name = self.tech.Name
        self.connman_path = '/var/lib/connman/' + self.device_name + '/'
        self.connman_cfg_file = self.connman_path + 'settings'
        self.current = self.refresh_current_configuration()

        if self.get_current_method() == 'manual':
            self.new = Parameters(clonefrom=self.current)
        else:
            self.new = Parameters(method=self.current.method, passphrase=self.current.passphrase)

    def refresh_current_configuration(self):
        return Parameters(method=self.get_current_method(), ip=self.get_current_ip(),
                                  netmask=self.get_current_netmask(), gateway=self.get_system_gateway(),
                                  dns=self.get_current_dns(), passphrase=self.get_current_passphrase())

    def refresh(self):
        try:
            self.tech = con.service.ConnService(self.path)
            self.current = self.refresh_current_configuration()
        except dbus.exceptions.DBusException:
            print "Wifi no more reachable!"
            return False

        return True

    def get_current_state(self):
        return self.tech.State

    def get_current_method(self):
        try:
            curr_method = self.tech.get_property('IPv4')['Method']
            return curr_method
        except KeyError:
            pass
        except dbus.exceptions.DBusException:
            print "wifi device no more available"

        return ''

    def set_new_method(self, new_method):
        if new_method == '0':
            self.new.reset()
        else:
            self.new = Parameters(clonefrom=self.current)

        self.new.method = new_method

    def get_current_ip(self):
        try:
            curr_ip = self.tech.get_property('IPv4')['Address']
            return curr_ip
        except KeyError:
            pass
        except dbus.exceptions.DBusException:
            print "wifi device no more available"

        return ''

    def set_new_ip(self, new_ip):
        self.new.ip = new_ip

    def get_current_netmask(self):
        try:
            curr_netmask = self.tech.get_property('IPv4')['Netmask']
            return curr_netmask
        except KeyError:
            pass
        except dbus.exceptions.DBusException:
            print "wifi device no more available"

        return ''

    def set_new_netmask(self, new_netmask):
        self.new.netmask = new_netmask

    def get_current_dns(self):
        name_server_list = []
        try:
            name_server_list = self.tech.get_property('Nameservers')
        except KeyError:
            pass
        except dbus.exceptions.DBusException:
            print "wifi device no more available"

        if len(name_server_list) > 1:
            return name_server_list[0]
        else:
            return ""

    def set_new_dns(self, new_dns):
        self.new.dns = new_dns

    def get_current_passphrase(self):
        if os.path.exists(self.connman_cfg_file):
            try:
                file = open(self.connman_cfg_file, 'r')
                for line in file:
                    if line.startswith('Passphrase'):
                        return line.split('=')[1]

            except OSError:
                pass
        return ''

    def set_new_passphrase(self, new_pw):
        self.new.passphrase = new_pw

    def get_system_gateway(self):
        output = os.popen('ip route')
        gw_line = output.readline()

        try:
            gw_ip = gw_line.split(" ")[2]
        except IndexError:
            return ""

        if validate_ip(gw_ip):
            return gw_ip

        return ""

    def set_new_gateway(self, new_gw):
        self.new.gateway = new_gw

    def get_netmask_bitlen(self, netmask):
        return sum([bin(int(x)).count('1') for x in netmask.split('.')])

    def create_connman_config_string(self, autoconnect='true'):
        settings_str = '[' + self.device_name + ']' + '\n' +\
                'Name=' + self.Name + '\n' +\
                'SSID=' + self.Name.encode('hex') + '\n' +\
                'Favorite=true\n' +\
                'AutoConnect=' + autoconnect + '\n' +\
                'Passphrase=' + self.new.passphrase + '\n' +\
                'IPv6.method=auto' + '\n' +\
                'IPv6.privacy=disabled' + '\n'

        if self.new.method == 'dhcp' or self.new.method == '':
            settings_str += 'IPv4.method=dhcp\n'
        else:
            settings_str += 'IPv4.method=manual\n' +\
                            'IPv4.local_address=' + self.new.ip + '\n' +\
                            'IPv4.netmask_prefixlen=' + str(self.get_netmask_bitlen(self.new.netmask)) + '\n' +\
                            'IPv4.gateway=' + self.new.gateway + '\n' +\
                            'Nameservers=' + self.new.dns + '\n'

        return settings_str

    def delete_device_config(self):
        if os.path.exists(self.connman_path):
            for file in os.listdir(self.connman_path):
                file_path = os.path.join(self.connman_path, file)
                if os.path.isfile(file_path):
                    os.remove(file_path)
            os.rmdir(self.connman_path)

    def write_config_file(self, settings_str):
        print_d(False, 'creating connman device setting file for: ', self.device_name)
        print_d(False, settings_str)
        try:
            file = open(self.connman_cfg_file, "w")
            file.write(settings_str)
            file.close()
        except OSError as e:
            print_d(True, "Error creating settings file: ", self.connman_cfg_file, " - ", str(e))
            return False

        try:
            os.remove(self.connman_path + 'data')
        except OSError as e:
            if e.errno != errno.ENOENT:
                return False

        return True

    def apply_changes(self):
        if self.Type == 'ethernet':
            return self.configure_ethernet()
        else:
            return self.connect_wifi()

    def configure_ethernet(self):

        print "Applying IPv4 configuration..."
        strg_ip = "connmanctl config " + self.device_name + " --ipv4 " + self.new.method + " " + self.new.ip + " " + self.new.netmask + " " + self.new.gateway
        os.popen(strg_ip)

        if not self.new.dns == "":
            print "Applying DNS configuration...", iniself.new.dns
            strg_dns = "connmanctl config " + self.device_name + " --nameservers " + self.new.dns
            os.popen(strg_dns)

    def restart_connman(self):
        print_d(False, "restarting connman")
        os.popen('systemctl restart connman.service')
        status = -1
        while status != 0:
            status = os.system('systemctl status connman.service> /dev/null')
            for i in range(4):
                print ".",
                sleep(1)

        print_d(False, 'Restarted...!')

        return True

    def connect_wifi(self):
        if self.new.passphrase != self.current.passphrase:
            self.retry_count = 0

        agent_string = '/config/agent' + str(self.agent_index)
        try:
            self.manager.unregister_agent(agent_string)
        except dbus.exceptions.DBusException:
            pass

        if self.get_current_state() == 'ready' or self.get_current_state() == 'online':
            try:
                wifi_service = con.ConnService(self.path)
                print "disconnecting wifi..."
                wifi_service.disconnect()
                self.new.passphrase = self.current.passphrase
                settings_str = self.create_connman_config_string('false')
                self.write_config_file(settings_str)
            except Exception as e:
                print "Error disconnecting: ", self.path, "\n", e
                if self.retry_count < 4:
                    self.restart_connman()
                    return CONNMAN_REINIT
        else:
            if not os.path.exists(self.connman_path):
                try:
                    os.mkdir(self.connman_path)
                except OSError as e:
                    print_d(True, "Error creating directory: ", self.connman_path, " - ", str(e))
                    return False

            settings_str = self.create_connman_config_string()
            if not self.write_config_file(settings_str):
                raw_input('cont error write_config_file')
                return False

            try:
                self.manager.unregister_agent(agent_string)

            except dbus.exceptions.DBusException:
                pass

            try:
                con.agent.SimpleWifiAgent(agent_string)
            except KeyError as e:
                print str(e)
            except dbus.exceptions.DBusException:
                print 'Unable to complete:', sys.exc_info()

            try:
                self.manager.register_agent(agent_string)
                wifi_service = con.ConnService(self.path)
                print "connecting to wifi..."
                print_d(False, "retrycount: ", self.retry_count)

                if self.new.passphrase == self.current.passphrase:
                    print_d(False, 'in simple wifi_service.connect()')
                    wifi_service.connect()
                    self.refresh_current_configuration()
                else:
                    print_d(False, 'in different passphrases')
                    if self.retry_count < 1:
                        print_d(False, 'doing restart...')
                        self.restart_connman()
                        sleep(4)
                        return CONNMAN_REINIT

            except Exception, e:
                self.manager.unregister_agent(agent_string)
                print_d(True, 'error connecting ', str(e))

        return True


class DeviceConfigurator:

    def __init__(self):
        self.manager = None
        self.services = None
        self.wifi_tech = None
        self.menu_manager = None

        self.do_initialisation()

    def run(self):
        while not self.select_device():
                print_d(True, 'New Device Select round')
                self.do_initialisation()

    def do_initialisation(self):
        print "INITIALISING DEVICE CONFIGURATOR"
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        self.manager = self.init_manager()
        self.refresh_services()
        self.wifi_tech = con.technology.ConnTechnology('/net/connman/technology/wifi')
        self.menu_manager = MenuManager(self.manager, self.wifi_tech)

    def refresh_services(self):
        try:
            self.services = self.manager.get_services()
        except dbus.exceptions.DBusException as e:
            print "Services temporarily unavailable... ", e
            return False

    def scan_wifi(self):
        try:
            self.wifi_tech.scan()
        except dbus.exceptions.DBusException as e:
            print "wifi scan not possible. ", e

    def switch_wifi_state(self, state):
        if state == '1':
            os.system('connmanctl enable wifi')
            sleep(1)
            self.scan_wifi()
        else:
            print "Disabling wifi..."
            os.system('connmanctl disable wifi')

    def refresh_wifi(self):
        try:
            if self.wifi_tech.Powered == 1:
                self.scan_wifi()
            else:
                print "wifi is disabled"
        except dbus.exceptions.DBusException as e:
            print "Error reading Wifi state. ", e

    def get_device_index_by_path(self, path):
        index = -1
        for service in self.services:
            index += 1
            if path in service:
                return index

    def retry_connect(self, old_device):
        print_d(True, 'in retry_connect')
        device_list_index = self.get_device_index_by_path(old_device.path)
        if device_list_index < 0:
            print_d(True, 'empty device list')
            return

        con.service.ConnService(self.services[device_list_index][0])
        chosen_device = Device(self.manager, self.services[device_list_index])
        chosen_device.retry_count = old_device.retry_count + 1
        if chosen_device.get_current_state() != 'ready' and chosen_device.get_current_state() != 'online':
            print_d(True, 'new_device not ready or online - init connect')
            self.execute_order(('DEVICE_APPLY_CONFIG',), chosen_device)
            sleep(1)
        else:
            print_d(True, 'device already online')

        return chosen_device

    def create_and_configure_device(self, index_of_service):
        try:
            con.service.ConnService(self.services[int(index_of_service)][0])
            chosen_device = Device(self.manager, self.services[int(index_of_service)])
            print_d(True, 'waiting for configure_device to return ')
            if not self.configure_device(chosen_device):
                print_d(True, 'Connection seemed to have failed in first place - retrying')
                result = self.retry_connect(chosen_device)
                if result is None:
                    print_d(True, 'Device not available..')
                    return
                sleep(2)
                print_d(True, 'entering configure device')
                self.configure_device(result)
            else:
                print_d(True, 'q in device config')

        except KeyError as e:
            print_d(True, 'Error instancing device', e)
        except dbus.exceptions.DBusException as e:
            print_d(True, 'Error instancing device: ', self.services[int(index_of_service)][0], e)

    def select_device(self):
        try:
            self.refresh_services()
            input = self.menu_manager.show_choose_device_menu(self.services)
            while 'QUIT' not in input:
                print_d(True, 'New Round in select Device')
                self.execute_order(input)
                self.refresh_services()
                raw_input('New device round...')
                input = self.menu_manager.show_choose_device_menu(self.services)
            return True
        except Exception as e:
            print_d(True, 'Unable to establish hardware communication - reinitialising...', e)
            return False

    def configure_device(self, device):
        input = self.menu_manager.show_device_menu(device)
        while 'QUIT' not in input:
            result = self.execute_order(input, device)
            print_d(True, 'RETURN OF ', input, ' IS ', result)
            if result is not None and result == CONNMAN_REINIT:
                self.do_initialisation()
                print_d(True, 'done initialisation')
                return False

            if not device.refresh():
                print_d(True, 'device.refresh')
                return False
            sleep(1)
            print_d(True, 'recalling show_divice_menu ')
            input = self.menu_manager.show_device_menu(device)

        return True

    def execute_order(self, order, device=None):
        if device is not None:
            command_map = {
                'DEVICE_APPLY_CONFIG': device.apply_changes,
                'DEVICE_METHOD': device.set_new_method,
                'DEVICE_IP': device.set_new_ip,
                'DEVICE_NETMASK': device.set_new_netmask,
                'DEVICE_GATEWAY': device.set_new_gateway,
                'DEVICE_DNS': device.set_new_dns,
                'DEVICE_PASSPHRASE': device.set_new_passphrase,
            }
        else:
            command_map = {
                'DEVICE_CHOSEN': self.create_and_configure_device,
                'WIFI_SET': self.switch_wifi_state,
                'WIFI_REFRESH': self.refresh_wifi,
            }
        print_d(True, 'running order: ', order[0])
        return command_map[order[0]](*order[1:])

    def init_manager(self):
        manager = None
        try:
            manager = con.ConnManager()
            manager.add_signal_receiver(self.dump_signal,
                                        con.ConnManager.SIGNAL_TECHNOLOGY_ADDED,
                                        None)
            manager.add_signal_receiver(self.dump_signal,
                                        con.ConnManager.SIGNAL_TECHNOLOGY_REMOVED,
                                        None)
            manager.add_signal_receiver(self.dump_signal,
                                        con.ConnManager.SIGNAL_SERVICES_CHANGED,
                                        None)
            manager.add_signal_receiver(self.dump_signal,
                                        con.ConnManager.SIGNAL_PROPERTY_CHANGED,
                                        None)
        except dbus.exceptions.DBusException:
            print 'Unable to complete:', sys.exc_info()

        return manager

    def dump_signal(self, signal, *args):
        print '\n========================================================='
        print '>>>>>', signal, '<<<<<'
        print args
        print '========================================================='


if __name__ == '__main__':
    configurator = DeviceConfigurator()
    configurator.run()
